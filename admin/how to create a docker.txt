ЁЯФО Dockerfile рджреЛрдмрд╛рд░рд╛ рджреЗрдЦрд┐рдП:
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --no-audit --no-fund

COPY . .

ENV NODE_ENV=production
RUN npm run build

RUN npm install -g serve

EXPOSE 80

CMD ["serve", "-s", "dist", "-l", "80"]

ЁЯУЭ Step-by-Step Explanation
1. FROM node:18-alpine

FROM тЖТ container рдХреЗ рд▓рд┐рдП base image рдЪреБрдирддреЗ рд╣реИрдВред

рдпрд╣рд╛рдБ рд╣рдордиреЗ Node.js v18 рдХрд╛ alpine variant рд▓рд┐рдпрд╛ тЖТ

Alpine Linux рдмрд╣реБрдд lightweight (рдЫреЛрдЯрд╛ size) рд╣реИ тЖТ image рдЫреЛрдЯрд╛ рд░рд╣рддрд╛ рд╣реИред

рдХреНрдпреЛрдВрдХрд┐ Vite project рдХреЛ Node.js рдХреА рдЬрд╝рд░реВрд░рдд рд╣реИ, рдЗрд╕реАрд▓рд┐рдП node image рд▓реА рдЧрдИред

2. WORKDIR /app

container рдХреЗ рдЕрдВрджрд░ /app рдирд╛рдо рдХрд╛ folder рд╣рдорд╛рд░рд╛ working directory рд╣реЛрдЧрд╛ред

рдЗрд╕рдХреЗ рдмрд╛рдж рдХреА рд╕рд╛рд░реА commands рдпрд╣реАрдВ рдХреЗ relative paths рдореЗрдВ рдЪрд▓реЗрдВрдЧреАред

рдРрд╕рд╛ рдХрд░рдиреЗ рд╕реЗ code рдФрд░ dependencies рдПрдХ рдЬрдЧрд╣ рд╕рд╛рдлрд╝-рд╕реБрдерд░рд╛ рд░рд╣рддрд╛ рд╣реИред

3. COPY package*.json ./

рдпреЗ command рд╕рд┐рд░реНрдл package.json рдФрд░ package-lock.json files рдХреЛ container рдореЗрдВ copy рдХрд░рддреА рд╣реИред

рд╣рдо code рдЕрднреА copy рдирд╣реАрдВ рдХрд░рддреЗ рдХреНрдпреЛрдВрдХрд┐ рдкрд╣рд▓реЗ dependencies install рдХрд░ рд▓реЗрдВрдЧреЗ тЖТ caching layer optimize рд╣реЛрддреА рд╣реИред

4. RUN npm ci --no-audit --no-fund

container рдореЗрдВ dependencies install рдХрд░рддрд╛ рд╣реИред

npm ci тЖТ fast & clean install (production рдХреЗ рд▓рд┐рдП best)ред

--no-audit --no-fund тЖТ audit/funding messages disable тЖТ build рддреЗрдЬрд╝ред

5. COPY . .

рдЕрдм рдкреВрд░рд╛ source code (src/, vite.config.js, index.html, рдЖрджрд┐) container рдореЗрдВ copy рдХрд░ рд▓реЗрддреЗ рд╣реИрдВред

рдпреЗ step build рдХреЗ рд▓рд┐рдП рдЬрд╝рд░реВрд░реА рд╣реИ рдХреНрдпреЛрдВрдХрд┐ code рдЪрд╛рд╣рд┐рдП рд╣реЛрдЧрд╛ред

6. ENV NODE_ENV=production

Environment variable set рдХрд░ рджрд┐рдпрд╛ тЖТ production modeред

рдХрдИ JS tools (рдЬреИрд╕реЗ Vite, React) production mode рдореЗрдВ optimized build рдмрдирд╛рддреЗ рд╣реИрдВред

7. RUN npm run build

рдпрд╣рд╛рдБ рд╣рдо package.json рдХрд╛ build script рдЪрд▓рд╛ рд░рд╣реЗ рд╣реИрдВ тЖТ Vite project рдХреЗ рд▓рд┐рдП рдпреЗ optimized dist/ folder generate рдХрд░реЗрдЧрд╛ред

React/Tailwind рдХрд╛ production-ready HTML, JS, CSS рдпрд╣реАрдВ рдмрдирддрд╛ рд╣реИред

8. RUN npm install -g serve

serve рдирд╛рдо рдХрд╛ рдЫреЛрдЯрд╛ static file server globally install рдХрд┐рдпрд╛ред

рдЗрд╕рдХрд╛ рдХрд╛рдо рд╣реИ dist/ folder рдХреЛ host рдХрд░рдирд╛ (React/Vite app рдХреЗ рд▓рд┐рдП production server)ред

рдЗрд╕рд╕реЗ рд╣рдореЗрдВ nginx рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ рдкрдбрд╝реАред

9. EXPOSE 80

container рдмрддрд╛рдПрдЧрд╛ рдХрд┐ рд╡реЛ port 80 рдкрд░ listen рдХрд░реЗрдЧрд╛ред

рдпреЗ рд╕рд┐рд░реНрдл informational рд╣реИ тЖТ actual port mapping рд╣рдо docker run -p 80:80 рд╕реЗ рдХрд░рддреЗ рд╣реИрдВред

10. CMD ["serve", "-s", "dist", "-l", "80"]

container рд╢реБрд░реВ рд╣реЛрддреЗ рд╣реА рдпреЗ default command run рд╣реЛрдЧреА:

serve -s dist -l 80

-s тЖТ single-page-app mode (deep link routes рдХреЗ рд▓рд┐рдП)

dist тЖТ рдпрд╣реА build output folder serve рдХрд░реЗрдЧрд╛

-l 80 тЖТ port 80 рдкрд░ listen рдХрд░реЗрдЧрд╛

тЪЩя╕П .dockerignore
node_modules
dist
.vscode
.git
npm-debug.log*


рдпрд╣ file рдмрддрд╛рддреА рд╣реИ рдХрд┐ рдХреМрди-рд╕реА files Docker image рдореЗрдВ copy рди рд╣реЛрдВред

node_modules copy рдХрд░рдиреЗ рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ рдХреНрдпреЛрдВрдХрд┐ рд╣рдо container рдореЗрдВ рдЦреБрдж install рдХрд░рддреЗ рд╣реИрдВред

dist рднреА copy рдирд╣реАрдВ рдХрд░рддреЗ рдХреНрдпреЛрдВрдХрд┐ рд╣рдо рдЗрд╕реЗ container рдХреЗ рдЕрдВрджрд░ build рдХрд░реЗрдВрдЧреЗред

ЁЯЪА Build & Run рдХреИрд╕реЗ рдХрд░реЗрдВ
docker build -t prescripto-admin .
docker run -d -p 80:80 prescripto-admin


docker build тЖТ рдКрдкрд░ рдХреЗ steps рд╕реЗ image рдмрдирддреА рд╣реИред

docker run тЖТ container launch рдХрд░рддрд╛ рд╣реИ рдФрд░ host рдХреЗ port 80 рд╕реЗ bind рдХрд░рддрд╛ рд╣реИред

рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ http://localhost рдЦреЛрд▓реЗрдВрдЧреЗ рддреЛ React app рджрд┐рдЦреЗрдЧрд╛ред

ЁЯЯв Recap (Q тЖТ A)

Q: Single stage рдХреНрдпреЛрдВ?
ЁЯСЙ рдХреНрдпреЛрдВрдХрд┐ рд╣рдо рдЕрд▓рдЧ build container рдирд╣реАрдВ рд░рдЦрдирд╛ рдЪрд╛рд╣рддреЗ, рд╕рдм рдХреБрдЫ рдПрдХ рд╣реА image рдореЗрдВ рдХрд░ рд░рд╣реЗ рд╣реИрдВред

Q: рдХреНрдпрд╛ рд▓рд┐рдЦрд╛ рдФрд░ рдХреНрдпреЛрдВ рд▓рд┐рдЦрд╛?
ЁЯСЙ рдКрдкрд░ рд╣рд░ step рдореЗрдВ рдмрддрд╛рдпрд╛:

base image = node

deps install

code copy

production build

serve рд╕реЗ run

port expose + command set

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЗрдВрдЧреЗ рдХрд┐ рдореИрдВ diagram рдХреЗ рдЬрд╝рд░рд┐рдП рднреА рд╕рдордЭрд╛рдКрдБ рдХрд┐ Docker image рдХреЗ layers рдХреИрд╕реЗ рдмрдирддреЗ рд╣реИрдВ (рдЬреИрд╕реЗ COPY/RUN layers)?